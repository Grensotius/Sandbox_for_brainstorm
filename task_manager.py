import csv
import os
from datetime import datetime, timedelta, time
import matplotlib.pyplot as plt
from win10toast import ToastNotifier
import sys
#V 0.1.89
class NotificationManager:
    def __init__(self):
        self.enabled = False
        self.toaster = None
        self._initialize()
    
    def _initialize(self):
        try:
            if sys.platform != 'win32':
                return
                
            from win10toast import ToastNotifier
            self.toaster = ToastNotifier()
            self.enabled = True
        except ImportError:
            print("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ win10toast –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –≤—ã–≤–æ–¥–∏—Ç—å—Å—è –≤ –∫–æ–Ω—Å–æ–ª—å.")
        except Exception as e:
            print(f"–°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {str(e)}")
    
    def show(self, title, message, duration=3):
        if self.enabled and self.toaster:
            try:
                self.toaster.show_toast(
                    title,
                    message,
                    duration=duration,
                    threaded=False
                )
                
                time.sleep(duration + 2)
                return True
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}")
        
        print(f"\n\033[93m[–£–í–ï–î–û–ú–õ–ï–ù–ò–ï] {title}: {message}\033[0m\n")
        return False

class Task:
    def __init__(self, title, due_date=None, status="–ù–µ –Ω–∞—á–∞—Ç–∞", progress=0):
        self.title = title
        self.due_date = due_date
        self.status = status
        self.progress = progress
        self.created_date = datetime.now().strftime("%Y-%m-%d")
    
    def update_progress(self, new_progress):
        new_progress = max(0, min(100, new_progress))
        self.progress = new_progress
        if new_progress == 100:
            self.status = "–ó–∞–≤–µ—Ä—à–µ–Ω–∞"
        elif new_progress > 0:
            self.status = "–í –ø—Ä–æ—Ü–µ—Å—Å–µ"
        else:
            self.status = "–ù–µ –Ω–∞—á–∞—Ç–∞"
    
    def get_progress_bar(self, width=20):
        filled = int(self.progress / 100 * width)
        empty = width - filled
        return f"[{'‚ñà' * filled}{'‚ñë' * empty}] {self.progress}%"
    
    def calculate_required_progress(self):
        if not self.due_date or self.progress == 100:
            return None, None, None
            
        today = datetime.now().date()
        due_date = datetime.strptime(self.due_date, "%Y-%m-%d").date()
        total_days = (due_date - datetime.strptime(self.created_date, "%Y-%m-%d").date()).days
        days_left = (due_date - today).days
        
        if total_days <= 0 or days_left <= 0:
            return 100, 0, "danger"
        
        required_daily = (100 - self.progress) / days_left
        actual_daily = self.progress / (total_days - days_left) if (total_days - days_left) > 0 else 0
        
        status = "success" if self.progress >= (100 * (1 - days_left/total_days)) else "warning"
        if required_daily > 10 or days_left < 3:
            status = "danger"
        
        return required_daily, days_left, status
    
    def __repr__(self):
        progress_bar = self.get_progress_bar()
        return f"–ó–∞–¥–∞—á–∞: {self.title} | –°—Ä–æ–∫: {self.due_date} | –°—Ç–∞—Ç—É—Å: {self.status}\n–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_bar}"

class TaskManager:
    def __init__(self, filename="tasks.csv"):
        self.filename = filename
        self.tasks = []
        self.notifier = NotificationManager()
        self.load_tasks()

    def show_notification(self, title, message, duration=5):
        try:
            self.notifier.show(title, message)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {str(e)}")

    def update_progress(self, title, new_progress):
        for task in self.tasks:
            if task.title.lower() == title.lower():
                prev_status = task.status
                task.update_progress(new_progress)
                self.save_tasks()
                
                if task.status == "–ó–∞–≤–µ—Ä—à–µ–Ω–∞" and prev_status != "–ó–∞–≤–µ—Ä—à–µ–Ω–∞":
                    congrats_msg = f"üéâ –ü–û–ó–î–†–ê–í–õ–Ø–ï–ú! –ó–∞–¥–∞—á–∞ '{title}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
                    print(f"\n{congrats_msg}\n")
                    self.notifier.show("–ó–ê–î–ê–ß–ê –ó–ê–í–ï–†–®–ï–ù–ê", congrats_msg, 3)
                    return True
                
                required_daily, days_left, status = task.calculate_required_progress()
                
                if status == "success":
                    print(f"–û—Ç–ª–∏—á–Ω–æ! –ó–∞–¥–∞—á–∞ '{title}' –∏–¥–µ—Ç –ø–æ –ø–ª–∞–Ω—É üëç")
                elif status == "warning":
                    print(f"–í–Ω–∏–º–∞–Ω–∏–µ! –ü–æ –∑–∞–¥–∞—á–µ '{title}' –Ω—É–∂–Ω–æ —É—Å–∫–æ—Ä–∏—Ç—å—Å—è ‚ö†Ô∏è")
                    print(f"–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≥—Ä–µ—Å—Å: {required_daily:.1f}% –≤ –¥–µ–Ω—å")
                elif status == "danger":
                    print(f"–¢—Ä–µ–≤–æ–≥–∞! –ó–∞–¥–∞—á–∞ '{title}' –ø–æ–¥ —É–≥—Ä–æ–∑–æ–π —Å—Ä—ã–≤–∞ —Å—Ä–æ–∫–∞ üî•")
                    print(f"–ï–∂–µ–¥–Ω–µ–≤–Ω–æ –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å: {required_daily:.1f}%")
                
                return True
        print(f"–û—à–∏–±–∫–∞: –ó–∞–¥–∞—á–∞ '{title}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return False
    
    def check_progress_alerts(self, show_toast=True):
        alerts = []
        for task in self.get_pending_tasks():
            if task.due_date:
                required_daily, days_left, status = task.calculate_required_progress()
                
                if status == "danger" and days_left > 0:
                    alert_msg = f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–†–û–í–ï–ù–¨: '{task.title}'! –û—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω–µ–π, —Ç—Ä–µ–±—É–µ—Ç—Å—è {required_daily:.1f}% –≤ –¥–µ–Ω—å"
                    alerts.append(alert_msg)
                    if show_toast:
                        self.show_notification("–°–†–û–ß–ù–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï", alert_msg)
                
                elif status == "danger" and days_left <= 0:
                    alert_msg = f"üî• –ü–†–û–°–†–û–ß–ï–ù–û: '{task.title}'! –ó–∞–¥–∞—á–∞ –¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –±—ã—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞ {-days_left} –¥–Ω–µ–π –Ω–∞–∑–∞–¥"
                    alerts.append(alert_msg)
                    if show_toast:
                        self.show_notification("–ü–†–û–°–†–û–ß–ï–ù–ê –ó–ê–î–ê–ß–ê", alert_msg)
                
                elif status == "warning":
                    alert_msg = f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: '{task.title}' - –æ—Ç—Å—Ç–∞–≤–∞–Ω–∏–µ –æ—Ç –≥—Ä–∞—Ñ–∏–∫–∞! –û—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω–µ–π, —Ç—Ä–µ–±—É–µ—Ç—Å—è {required_daily:.1f}% –≤ –¥–µ–Ω—å"
                    alerts.append(alert_msg)
                    if show_toast:
                        self.show_notification("–í–ù–ò–ú–ê–ù–ò–ï: –û—Ç—Å—Ç–∞–≤–∞–Ω–∏–µ", alert_msg)
                
                elif status == "success":
                    alert_msg = f"‚úÖ –•–û–†–û–®–ê–Ø –†–ê–ë–û–¢–ê: '{task.title}' –∏–¥–µ—Ç –ø–æ –ø–ª–∞–Ω—É! –û—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω–µ–π, —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {task.progress}%"
                    alerts.append(alert_msg)
        if alerts:
            print("\n" + "="*60)
            print("–°–ò–°–¢–ï–ú–ù–´–ï –û–ü–û–í–ï–©–ï–ù–ò–Ø –û –ü–†–û–ì–†–ï–°–°–ï:")
            for alert in alerts:
                print(f"- {alert}")
            print("="*60 + "\n")
        return alerts
    
    def load_tasks(self):
        if os.path.exists(self.filename):
            with open(self.filename, 'r', newline='', encoding='utf-8') as file:
                reader = csv.DictReader(file)
                for row in reader:
                    task = Task(row['title'], row['due_date'], row['status'], int(row.get('progress', 0)))
                    task.created_date = row.get('created_date', datetime.now().strftime("%Y-%m-%d"))
                    self.tasks.append(task)
    
    def save_tasks(self):
        with open(self.filename, 'w', newline='', encoding='utf-8') as file:
            fieldnames = ['title', 'due_date', 'status', 'progress', 'created_date']
            writer = csv.DictWriter(file, fieldnames=fieldnames)
            writer.writeheader()
            for task in self.tasks:
                writer.writerow({
                    'title': task.title,
                    'due_date': task.due_date,
                    'status': task.status,
                    'progress': task.progress,
                    'created_date': task.created_date
                })

    def add_task(self, title, due_date=None):
        if any(task.title.lower() == title.lower() for task in self.tasks):
            print(f"–û—à–∏–±–∫–∞: –ó–∞–¥–∞—á–∞ '{title}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return False
            
        new_task = Task(title, due_date)
        self.tasks.append(new_task)
        self.save_tasks()
        print(f"–ó–∞–¥–∞—á–∞ '{title}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        return True
    
    def start_task(self, title):
        for task in self.tasks:
            if task.title.lower() == title.lower():
                if task.status == "–ó–∞–≤–µ—Ä—à–µ–Ω–∞":
                    print(f"–û—à–∏–±–∫–∞: –ó–∞–¥–∞—á–∞ '{title}' —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                    return False
                task.status = "–í –ø—Ä–æ—Ü–µ—Å—Å–µ"
                self.save_tasks()
                print(f"–ó–∞–¥–∞—á–∞ '{title}' –Ω–∞—á–∞—Ç–∞!")
                return True
        print(f"–û—à–∏–±–∫–∞: –ó–∞–¥–∞—á–∞ '{title}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return False

    def complete_task(self, title):
        for task in self.tasks:
            if task.title.lower() == title.lower():
                task.status = "–ó–∞–≤–µ—Ä—à–µ–Ω–∞"
                self.save_tasks()
                print(f"–ó–∞–¥–∞—á–∞ '{title}' –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è!")
                return True
        if task.status == "–ó–∞–≤–µ—Ä—à–µ–Ω–∞":
            print(f"–ó–∞–¥–∞—á–∞ '{title}' —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            return False
        print(f"–û—à–∏–±–∫–∞: –ó–∞–¥–∞—á–∞ '{title}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return False

    def get_pending_tasks(self):
        return [task for task in self.tasks if task.status != "–ó–∞–≤–µ—Ä—à–µ–Ω–∞"]
        
    def calculate_productivity(self):
        if not self.tasks:
            return 0, 0, 0
            
        completed = sum(1 for task in self.tasks if task.status == "–ó–∞–≤–µ—Ä—à–µ–Ω–∞")
        in_progress = sum(1 for task in self.tasks if task.status == "–í –ø—Ä–æ—Ü–µ—Å—Å–µ")
        pending = len(self.tasks) - completed - in_progress
        
        return completed, in_progress, pending

    def show_productivity_chart(self):
        try:
            import matplotlib.pyplot as plt
        except ImportError:
            print("–û—à–∏–±–∫–∞: –î–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ matplotlib!")
            print("–í—ã–ø–æ–ª–Ω–∏—Ç–µ: pip install matplotlib")
            return
        try:
            from win10toast import ToastNotifier
            TOAST_ENABLED = True
        except ImportError:
            TOAST_ENABLED = False
            print("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ win10toast –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
        except:
            TOAST_ENABLED = False
            print("–°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –≤–∞—à–µ–π –û–°")

        completed, in_progress, pending = self.calculate_productivity()
        
        if completed == 0 and in_progress == 0 and pending == 0:
            print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏!")
            return
            
        labels = ['–ó–∞–≤–µ—Ä—à–µ–Ω–æ', '–í –ø—Ä–æ—Ü–µ—Å—Å–µ', '–û–∂–∏–¥–∞–µ—Ç']
        values = [completed, in_progress, pending]
        colors = ['#2ecc71', '#3498db', '#e74c3c']
        
        plt.figure(figsize=(10, 6))
        plt.bar(labels, values, color=colors)
        plt.title('–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á')
        plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á')
        
        for i, v in enumerate(values):
            plt.text(i, v + 0.2, str(v), ha='center')
            
        plt.tight_layout()
        plt.savefig('productivity_chart.png')
        print("–î–∏–∞–≥—Ä–∞–º–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ 'productivity_chart.png'")

    def check_deadlines(self):
        today = datetime.now().date()
        overdue_tasks = []
        
        for task in self.get_pending_tasks():
            if task.due_date:
                due_date = datetime.strptime(task.due_date, "%Y-%m-%d").date()
                if due_date < today:
                    overdue_tasks.append(task)
        
        return overdue_tasks

    def upcoming_deadlines(self, days=7):
        today = datetime.now().date()
        upcoming = []

        for task in self.get_pending_tasks():
            if task.due_date:
                due_date = datetime.strptime(task.due_date, "%Y-%m-%d").date()
                delta = (due_date - today).days
                if 0 <= delta <= days:
                    upcoming.append((task, delta))
        
        upcoming.sort(key=lambda x: x[1])
        return upcoming
    
class TaskManagerCLI:
    def __init__(self):
        self.manager = TaskManager()
        self.commands = {
            "add": self.add_task,
            "start": self.start_task,
            "progress": self.update_progress,
            "complete": self.complete_task,
            "list": self.list_tasks,
            "pending": self.list_pending,
            "stats": self.show_stats,
            "deadlines": self.check_deadlines,
            "upcoming": self.show_upcoming,
            "alerts": self.check_alerts,
            #"debug": self.debug_mode,
            "help": self.show_help,
            "exit": self.exit_app
        }
    
    def run(self):
        print("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TaskManager!")
        self.manager.check_progress_alerts()
        self.show_help()
        
        while True:
            try:
                command = input("\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: ").strip().lower()
                if command in self.commands:
                    self.commands[command]()
                else:
                    print("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ 'help' –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")
            except KeyboardInterrupt:
                print("\n–ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –î–ª—è –≤—ã—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ 'exit'")

    def add_task(self):
        title = input("–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: ")
        due_date = input("–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–ì–ì–ì–ì-–ú–ú-–î–î, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ): ").strip()
        self.manager.add_task(title, due_date if due_date else None)

    def start_task(self):
        title = input("–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ")
        self.manager.start_task(title)

    def update_progress(self):
        title = input("–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: ")
        try:
            progress = int(input("–¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å (0-100%): "))
            self.manager.update_progress(title, progress)
        except ValueError:
            print("–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100")

    def complete_task(self):
        title = input("–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏: ")
        self.manager.complete_task(title)
    
    def list_tasks(self):
        print("\n–í—Å–µ –∑–∞–¥–∞—á–∏:")
        for i, task in enumerate(self.manager.tasks, 1):
            print(f"{i}. {task}")
    
    def list_pending(self):
        pending = self.manager.get_pending_tasks()
        print("\n–ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:")
        for i, task in enumerate(pending, 1):
            print(f"{i}. {task}")
    
    def show_stats(self):
        self.manager.show_productivity_chart()
        print("–î–∏–∞–≥—Ä–∞–º–º–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª 'productivity_chart.png'")
    
    def check_deadlines(self):
        overdue = self.manager.check_deadlines()
        if overdue:
            print("\n–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:")
            for i, task in enumerate(overdue, 1):
                print(f"{i}. {task.title} (—Å—Ä–æ–∫: {task.due_date})")
        else:
            print("–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–µ—Ç!")
    
    def show_upcoming(self):
        upcoming = self.manager.upcoming_deadlines()
        if upcoming:
            print("\n–ë–ª–∏–∂–∞–π—à–∏–µ –¥–µ–¥–ª–∞–π–Ω—ã:")
            for task, days in upcoming:
                print(f"- {task.title}: —á–µ—Ä–µ–∑ {days} –¥–Ω–µ–π ({task.due_date})")
        else:
            print("–ë–ª–∏–∂–∞–π—à–∏—Ö –¥–µ–¥–ª–∞–π–Ω–æ–≤ –Ω–µ—Ç!")

    def check_alerts(self):
        alerts = self.manager.check_progress_alerts(show_toast=True)
        if not alerts:
            print("–í—Å–µ –∑–∞–¥–∞—á–∏ –∏–¥—É—Ç –ø–æ –ø–ª–∞–Ω—É! üëç")
            self.manager.toast_manager.show_notification("–í—Å—ë –ø–æ –ø–ª–∞–Ω—É", "–í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –≤ —Å—Ä–æ–∫!")
    """def debug_mode(self):
        self.manager.tasks = []
        
        today = datetime.now().date()
        
        overdue_date = (today - timedelta(days=5)).strftime("%Y-%m-%d")
        task1 = Task("–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç", overdue_date, "–í –ø—Ä–æ—Ü–µ—Å—Å–µ", 30)
        task1.created_date = (today - timedelta(days=20)).strftime("%Y-%m-%d")
        self.manager.tasks.append(task1)
        
        due_soon = (today + timedelta(days=2)).strftime("%Y-%m-%d")
        task2 = Task("–°—Ä–æ—á–Ω—ã–π –ø—Ä–æ–µ–∫—Ç", due_soon, "–í –ø—Ä–æ—Ü–µ—Å—Å–µ", 20)
        task2.created_date = (today - timedelta(days=10)).strftime("%Y-%m-%d")
        self.manager.tasks.append(task2)
        
        future_date = (today + timedelta(days=10)).strftime("%Y-%m-%d")
        task3 = Task("–ü—Ä–æ–µ–∫—Ç —Å –æ–ø–µ—Ä–µ–∂–µ–Ω–∏–µ–º", future_date, "–í –ø—Ä–æ—Ü–µ—Å—Å–µ", 60)
        task3.created_date = (today - timedelta(days=5)).strftime("%Y-%m-%d")
        self.manager.tasks.append(task3)
        
        task4 = Task("–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç", status="–ó–∞–≤–µ—Ä—à–µ–Ω–∞", progress=100)
        self.manager.tasks.append(task4)
        
        task5 = Task("–ü—Ä–æ–µ–∫—Ç –±–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞")
        self.manager.tasks.append(task5)
        
        self.manager.save_tasks()
        print("–°–æ–∑–¥–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏:")
        print("1. –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç")
        print("2. –°—Ä–æ—á–Ω—ã–π –ø—Ä–æ–µ–∫—Ç (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç—Å—Ç–∞–≤–∞–Ω–∏–µ)")
        print("3. –ü—Ä–æ–µ–∫—Ç —Å –æ–ø–µ—Ä–µ–∂–µ–Ω–∏–µ–º –≥—Ä–∞—Ñ–∏–∫–∞")
        print("4. –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç")
        print("5. –ü—Ä–æ–µ–∫—Ç –±–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞")
        
        self.check_alerts()
        
        self.list_tasks()"""
    def show_help(self):
        print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
        print("add      - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É")
        print("start    - –ù–∞—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏")
        print("progress - –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
        print("complete - –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é")
        print("list     - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏")
        print("pending  - –ü–æ–∫–∞–∑–∞—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏")
        print("stats    - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
        print("deadlines- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏")
        print("upcoming - –ü–æ–∫–∞–∑–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ –¥–µ–¥–ª–∞–π–Ω—ã")
        print("alerts   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è")
        print("help     - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É")
        print("exit     - –í—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
    
    def exit_app(self):
        print("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
        self.manager.save_tasks()
        print("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
        exit()

if __name__ == "__main__":
    cli = TaskManagerCLI()
    cli.run()